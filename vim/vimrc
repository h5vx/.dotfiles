unlet! skip_defaults_vim

if !has('nvim')
    source $VIMRUNTIME/defaults.vim
endif

set encoding=UTF-8

:set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
inoremap <C-ц> <C-w>

" Custom filetypes
au BufRead,BufNewFile *.ron  set filetype=rust
au BufRead,BufNewFile *.ejs  set filetype=javascript

" =========================[      Plugins     ]=========================
call plug#begin('~/.vim/plugged')

Plug 'lambdalisue/suda.vim'
let g:suda_smart_edit = 1

Plug 'jeetsukumaran/vim-buffergator'

Plug 'wincent/terminus'

Plug 'voldikss/vim-floaterm'
" let g:floaterm_wintype = "split"
let g:floaterm_title = "   $1 / $2 "
let g:floaterm_position = "bottom"
let g:floaterm_height = 0.4
let g:floaterm_width = 1.0
let g:floaterm_borderchars = "─│─│╭╮╯╰"
let g:floaterm_keymap_toggle = '<A-t>'

" Not working :(
highlight FloatermBorder guibg=black ctermbg=black

" Git integration
Plug 'airblade/vim-gitgutter'
highlight SignColumn      guibg=black ctermbg=black
highlight GitGutterAdd    guifg=#448811 ctermbg=black ctermfg=green
highlight GitGutterChange guifg=#dddd00 ctermbg=black ctermfg=yellow
highlight GitGutterDelete guifg=#ff2222 ctermbg=black ctermfg=red
" Uncool:  ⭘   ⏽    
" Cool:  
let g:gitgutter_sign_added = ''
let g:gitgutter_sign_modified = ''
let g:gitgutter_sign_removed = ''
let g:gitgutter_sign_modified_removed = ''


Plug 'tpope/vim-fugitive'

Plug 'jiangmiao/auto-pairs'
let g:AutoPairsShortcutBackInsert=""
Plug 'scrooloose/nerdcommenter'

" Python support
Plug 'davidhalter/jedi-vim'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

Plug 'mgedmin/python-imports.vim'
map gi :ImportName<CR>

Plug 'vim-syntastic/syntastic'
Plug 'fisadev/vim-isort'

Plug 'psf/black', { 'branch': 'stable' }
let g:black_quiet = 1

" Go
Plug 'fatih/vim-go'

" PHP
Plug 'vim-vdebug/vdebug'

Plug 'jmcantrell/vim-virtualenv'

" Markdown Table Of Contents
Plug 'mzlogin/vim-markdown-toc'

" Multiple cursors
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Crystal lang support
Plug 'vim-crystal/vim-crystal'

" Gruvbox colorscheme
Plug 'gruvbox-community/gruvbox'
Plug 'sainnhe/gruvbox-material'

Plug 'vim-airline/vim-airline'
let g:airline#extensions#tabline#enabled = 1

Plug 'ianding1/leetcode.vim'
let g:leetcode_browser = 'firefox'
let g:leetcode_solution_filetype = 'python'
let g:leetcode_hide_paid_only = 1

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-telescope/telescope-project.nvim'

Plug 'dominikduda/vim_current_word'
let g:vim_current_word#highlight_current_word = 1
let g:vim_current_word#highlight_only_in_focused_window = 1
autocmd! BufAdd NERD_tree_* :let b:vim_current_word_disabled_in_this_buffer = 1

Plug 'ryanoasis/vim-devicons'

Plug 'easymotion/vim-easymotion'
map <Bslash> <Plug>(easymotion-prefix)

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

call plug#end()
" ----------------------------------------------------------------------


" =========================[      NERDTree    ]=========================
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']

function! IsNTFocused()
  return exists("t:NERDTreeBufName") && bufname() == t:NERDTreeBufName
endfunction

function! NTFocusOrToggle()
    if IsNTFocused()
        NERDTreeToggle
    else
        NERDTreeFind
        normal! zz
    endif
endfunction

nnoremap <A-1> :call NTFocusOrToggle()<CR>
" ----------------------------------------------------------------------

if !has('nvim')
    set termwinkey=<ESC>
endif

let mapleader = " "

let g:pymode = 1
let g:pymode_options_max_line_length = 119
let g:pymode_options_colorcolumn = 0
let g:pymode_trim_whitespaces = 1

" Use 4 spaces instead of tabs
set noswapfile

" Enable case-insensitive search
set ignorecase

" Enable search highlighting
set hlsearch

" Clear search highlighting
nnoremap <Leader><Esc> :noh<CR>

set expandtab               " Use 4 spaces instead of tabs
set tabstop=4
set shiftwidth=4

" Show line numbers
set number

" Next/Prev token with screen centering
nnoremap * *zz
nnoremap # #zz

" Move lines up/down
nnoremap <C-A-j> :m .+1<CR>==
nnoremap <C-A-k> :m .-2<CR>==
vnoremap <C-A-j> :m '>+1<CR>gv=gv
vnoremap <C-A-k> :m '<-2<CR>gv=gv

tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
inoremap <A-h> <C-\><C-N><C-w>h
inoremap <A-j> <C-\><C-N><C-w>j
inoremap <A-k> <C-\><C-N><C-w>k
inoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" Moving in history
nnoremap H <C-O>
nnoremap L <C-I>

set noequalalways  " Don't resize windows after closing split
nnoremap <Leader>w <C-W>
nnoremap Q :q<CR>

" Copy/Paste to system clipboard
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y
nnoremap <Leader>p "+p
vnoremap <Leader>p "+p

nnoremap <C-s> :w<CR>

inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Up>
inoremap <A-f> <C-right>
imap <A-b> <C-left>

" Search / FZF
nnoremap <Leader>f <cmd>Telescope find_files<CR>
nnoremap <Leader>: :History:<CR>
nnoremap <Leader>/ <cmd>Telescope search_history<CR>
nmap <Leader>b <cmd>Telescope buffers<CR>
nnoremap <F1> <cmd>Telescope help_tags<CR>
nnoremap <A-e> <cmd>Buffers<CR>
nnoremap <C-F> <cmd>Telescope live_grep<CR>
vnoremap <C-F> <cmd>Telescope grep_string<CR>
nnoremap <C-p> <cmd>Telescope treesitter<CR>
nnoremap <leader>s <cmd>Telescope project<CR>
nnoremap <leader><C-n> <cmd>Tags<CR>
nnoremap gf <cmd>execute("Tags " . expand('<cword>'))<CR>

nnoremap <Leader>G <cmd>G<CR>
nnoremap <Leader>Gb <cmd>Telescope git_branches<CR>
nnoremap <Leader>Gp <cmd>G pull<CR>
nnoremap <Leader>Gk <cmd>G push<CR>

" Disable GUI menus
let did_install_default_menus = 1
let did_install_syntax_menu = 1

" Display some whitespace characters
set list
set listchars=tab:→\ ,trail:·,nbsp:⎵

" Reduce update latency, default is 4000
set updatetime=100

set splitright

nnoremap <F2> :tabedit ~/.vim/vimrc<CR>

" Vim config autoreload
autocmd! BufWritePost vimrc source % | AirlineRefresh

autocmd! BufWritePre *.py execute ':Black'


" Difftool
function! DiffGet(direction)
    let bufnr = winbufnr(winnr(a:direction))
    exe "diffget " . bufnr
endfunction

nnoremap <Leader>dh :call DiffGet("1h")<CR>
nnoremap <Leader>dl :call DiffGet("1l")<CR>

" =========================[     Terminal     ]=========================
augroup neovim_terminal
    autocmd!
    " Enter Terminal-mode (insert) automatically
    autocmd TermOpen * startinsert
    " Disables number lines on terminal buffers
    autocmd TermOpen * :set nonumber norelativenumber
    " allows you to use Ctrl-c on terminal window
    autocmd TermOpen * nnoremap <buffer> <C-c> i<C-c>
augroup END

tnoremap <C-Space> <C-\><C-n><C-w><C-w>

" =========================[       Theme      ]=========================
let g:gruvbox_contrast_dark = "medium"
let g:gruvbox_material_background = "hard"
let g:gruvbox_material_ui_contrast = "high"
let g:gruvbox_material_cursor = "purple"
let g:gruvbox_material_show_eob = 0
let g:gruvbox_material_diagnostic_line_highlight = 1
let g:gruvbox_material_transparent_background = 1
let g:gruvbox_transparent_bg=1
let g:gruvbox_material_visual = 'red background'
let g:gruvbox_material_current_word='grey background'
let g:gruvbox_material_statusline_style = 'original'
let g:gruvbox_material_palette = 'mix'

set bg=dark

let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox_material'

colorscheme gruvbox-material

" =========================[    GUI Config    ]=========================
set guicursor+=a:blinkon300  " GNvim

"let g:neovide_transparency = 0.9
let g:neovide_cursor_vfx_theme = "sonicboom"
let g:neovide_floating_blur = 0

let s:fontsize = 8
function! AdjustFontSize(amount)
  let s:fontsize = s:fontsize+a:amount
  let &guifont = "Jetbrains\ Mono:h" . s:fontsize
endfunction
call AdjustFontSize(0)

nnoremap <C-+> :call AdjustFontSize(1)<CR>
nnoremap <C-_> :call AdjustFontSize(-1)<CR>
" ----------------------------------------------------------------------

" packadd nvim-treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}

require('telescope').setup{
    defaults = {
    -- Default configuration for telescope goes here:
    -- config_key = value,
    -- ..
    --  layout_strategy = "vertical",
    --  winblend = 1,
        prompt_prefix = '» ',
        mappings = {
            i = {
                ["<C-j>"] = require('telescope.actions').select_default,
                ["<C-J>"] = require('telescope.actions').select_tab,
            },
        },
    },
    pickers = {
    -- Default configuration for builtin pickers goes here:
    -- picker_name = {
    --   picker_config_key = value,
    --   ...
    -- }
    -- Now the picker_config_key will be applied every time you call this
    -- builtin picker
    },
    extensions = {
    -- Your extension configuration goes here:
    -- extension_name = {
    --   extension_config_key = value,
    -- }
    -- please take a look at the readme of the extension you want to configure
    }
}
require'telescope'.load_extension('project')
EOF
